<template>
    <view class="invite-page page" wx:if="{{!loading}}">
        <view wx:if="{{!not_found}}">
            <view class="group-item flex" @tap="navigateTo('./detail?goods_id={{order_info.bid}}')" wx:if="{{!(order_info.joined && !order_info.remain_people)}}">
                <view class="join-number">
                    <text>{{order_info.group_people}}人团</text>
                </view>
                <image class="goods-image" src="{{order_info.image}}" mode="aspectFill" />
                <view class="goods-info">
                    <view class="goods-title text-over-ellipsis">{{order_info.wname}}</view>
                    <view class="group-price flex">
                        <view class="current-price">¥<text>{{order_info.current_price}}</text></view>
                        <view class="origin-price">¥{{order_info.price}}</view>
                    </view>
                    <view class="goods-operate flex">
                        <view class="group-tips">开团立减{{order_info.price - order_info.current_price}}元</view>
                        <view class="buy-btn">去拼团</view>
                    </view>
                </view>
            </view>
            <view wx:if="{{!(order_info.joined && !order_info.remain_people)}}">
                <view class="group-status flex" wx:if="{{order_info.remain_people}}">
                    <view class="group-number">
                        仅剩<text>{{order_info.remain_people}}</text>个名额
                    </view>
                    <view class="group-time">
                        <text>{{order_info.time.hour}}:{{order_info.time.min}}:{{order_info.time.sec}}</text>后结束
                    </view>
                </view>
                <view class="group-status flex full" wx:else>
                    <view class="group-number">
                        哇哦，这个团已经满人了～
                    </view>
                </view>
            </view>
            <view class="container flex" wx:if="{{!(order_info.joined && !order_info.remain_people)}}">
                <view class="group-members flex">
                    <view class="group-member">
                        <image class="member-img" src="{{order_info.head_pic}}" mode="aspectFill" />
                        <view class="member-title">团长</view>
                    </view>
                </view>
                <button class="btn primary-btn" open-type="share" plain="true" wx:if="{{order_info.joined && order_info.remain_people}}">邀请好友参团</button>
                <view class="btn primary-btn" wx:elif="{{!order_info.joined && order_info.remain_people}}" @tap="openSpec({{order_info.bid}},{{order_info.groupon_id}})">一键参团</view>
                <view class="btn primary-btn" wx:if="{{!order_info.remain_people}}" @tap="openSpec({{order_info.bid}},'')">我来开个团</view>
                <view class="tips">参与拼团·人满发货·不满退款</view>
                <view class="btn" @tap="gotoIndex">去首页</view>
            </view>
            <view class="container flex" wx:else>
                <image class="success-image" src="http://yimi.artqiyi.com/data/static/applet_images/groupon/icon_success.png" mode="aspectFill" />
                <view class="success-tips">拼团成功！</view>
                <view class="btn" @tap="navigateTo('/pages/order/order_detail_{{order_info.type}}?order_id={{order_info.sub_order_id}}')">查看订单</view>
                <view class="btn" @tap="gotoIndex">去首页</view>
            </view>
            <view class="group-others" wx:if="{{!order_info.joined && !order_info.remain_people}}">
                <view class="group-title" wx:if="{{group_list.length}}">有小伙伴在拼团，可直接参与</view>
                <view class="group-on flex" wx:for="{{group_list}}" wx:key="index" wx:for-index="index" wx:for-item="item">
                    <view class="flex">
                        <image class='user-img' src="{{item.head_pic}}" />
                        <view class="user-name">{{item.username}}</view>
                    </view>
                    <view wx:if="{{!item.disable}}">
                        <view class="group-number">还差{{item.remain_people}}人成团</view>
                        <view class="group-time">剩余 {{item.time.day}}:{{item.time.hour}}:{{item.time.min}}:{{item.time.sec}}</view>
                    </view>
                    <view wx:else>
                        <view class="group-number">拼团已结束</view>
                    </view>
                    <view class="btn flex {{item.disable?'disable':''}}" @tap="openSpec({{item.bid}},'{{item.id}}')">参团</view>
                </view>
            </view>
        </view>
        <view class="group-status flex full" wx:else>
            拼团已结束
        </view>
        <view class="common-section group-list">
            <view class="common-section-title flex">
                <view class="content">更多拼团</view>
            </view>
            <view class="goods-list vertical-list">
                <import src="/templates/vertical-goods-item.wxml" />
                <template is="vertical-goods-item" data="{{item}}" wx:for="{{goods_info.list}}" wx:key="index" />
                <view class="loading" wx:if="{{goods_info.hasNext || loading}}">正在加载中...</view>
                <view class="no-data" wx:if="{{goods_info.list.length > 0 && !goods_info.hasNext}}">
                    没有更多拼团商品了～
                </view>
            </view>
        </view>
        <shopIndex/>
    </view>
</template>
<script>
    import wepy from 'wepy';
    import store from '../../common/store';
    import api from '../../common/api';
    import orderService from '../../common/orderService';
    import shopIndex from '../../components/shop/index';
    let startTime = Date.now(),
        countdownTimeout;
    export default class Confirm extends wepy.page {
        renderGoodsRemainTime(realTimeLeft) {
            let {
                remain_time,
                finish_time
            } = this.order_info;
            let restTimestamp = remain_time * 1000;
            if (realTimeLeft >= finish_time * 1000) {
                startTime = Date.now();
                realTimeLeft = 0;
                clearTimeout(countdownTimeout);
                countdownTimeout = null;
                this.order_info.remain_people = 0;
                this.$apply();
            } else {
                this.order_info.time = api.format((restTimestamp - realTimeLeft) / 1000);
                this.$apply();
            }
        }
        renderOtherRemainTime(realTimeLeft) {
            this.group_list.map(item => {
                item.disable = false;
                let restTimestamp = item.remain_time * 1000;
                if (realTimeLeft >= item.finish_time * 1000) {
                    item.disable = true;
                } else {
                    item.time = api.format((restTimestamp - realTimeLeft) / 1000);
                }
            });
            this.$apply();
        }
        fixed() {
            let realTimeLeft = parseInt(Date.now() - startTime, 10),
                offset = Date.now() - (startTime + realTimeLeft),
                nextTime = 1000 - offset;
            if (nextTime < 0) nextTime = 0;
            countdownTimeout = setTimeout(() => {
                this.fixed();
            }, nextTime);
            this.renderGoodsRemainTime(realTimeLeft);
            if (this.group_list.length) {
                //其他倒计时
                this.renderOtherRemainTime(realTimeLeft);
            }
        }
        data = {
            loading: true,
            order_info: {},
            group_list: [],
            not_found: '',
            goods_info: {
                loading: false,
                list: [],
                page: 1,
                hasNext: true
            }
        };
        components = {
            shopIndex
        };
        events = {
            confirm(json, callback) {
                let {
                    data,
                    type,
                    goods_type,
                    url
                } = json;
                api.request({
                    url: url,
                    method: "POST",
                    data: data
                }).then(res => {
                    callback && callback();
                    store.set("goods_info", res);
                    api.navigateTo(`/pages/${goods_type}/confirm?from=buy&is_groupon=1`);
                }).catch(msg => {
                    api.showModal(msg);
                    callback && callback();
                });
            }
        };
        getGoodsList() {
            if (this.goods_info.loading) return;
            this.goods_info.loading = true;
            this.$apply();
            let uid = wx.getStorageSync('uid'),
                sdkInfo = wx.getStorageSync('sdk_zbinfo');
            let data = {
                page: this.goods_info.page,
                id: uid,
                token: sdkInfo.token,
                sign: sdkInfo.sign,
                ts: sdkInfo.ts,
                zb_id: api.buid,
                version: api.version,
                shop_id: api.shop_id
            };
            api.request({
                url: api.groupon_goods,
                data: data
            }).then(json => {
                json.list.map(item=>{
                    item.save_price = Math.round((item.price - item.current_price) * 100) / 100;
                });
                this.goods_info.list = this.goods_info.list.concat(json.list);
                this.goods_info.hasNext = json.has_next;
                this.goods_info.page++;
                this.goods_info.loading = false;
                this.$apply();
                api.loading.hide();
            }).catch(() => {
                this.goods_info.loading = false;
                this.$apply();
            });
        }
        getOrderInfo(order_id) {
            api.request({
                url: api.get_groupon_by_order,
                data: {
                    order_id: order_id
                }
            }).then(json => {
                json.save_price = Math.round((json.price - json.current_price) * 100) / 100;
                this.order_info = json;
                let title = `快来和我一起拼团！${json.current_price}元购买【${json.wname}】`;
                if (json.joined && !json.remain_people) {
                    title = "拼团成功";
                } else {
                    if (json.remain_time > 0) {
                        this.fixed();
                    }
                }
                if (!json.joined && !json.remain_people) {
                    this.getGrouponList();
                }
                this.loading = false;
                api.setTitle(title);
                this.$apply();
            }).catch(json => {
                this.not_found = true;
                this.loading = false;
                api.setTitle('拼团已结束');
                this.$apply();
            });
        }
        methods = {
            navigateTo(url) {
                api.navigateTo(url);
            },
            gotoIndex() {
                wx.reLaunch({
                    url: `/pages/main/index?shop_id=${api.shop_id}`
                });
            },
            openSpec(bid, groupon_id) {
                this.getGoodsInfo(bid).then(json => {
                    let {
                        wid,
                        wname,
                        skus,
                        shipping,
                        images,
                        best_sku,
                        attributes,
                        price,
                        type,
                        group_price
                    } = json, goods_info = {
                        wid,
                        wname,
                        shipping,
                        images,
                        best_sku,
                        attributes,
                        current_price: price,
                        type,
                        skus: []
                    }, url = api.buy_now_groupon;
                    goods_info.current_price = group_price;
                    skus.map(item => {
                        let {
                            sku_id,
                            image,
                            price,
                            values,
                            stock,
                            group_price,
                            group_stock
                        } = item;
                        let sku_item = {
                            sku_id,
                            image,
                            current_price: price,
                            values,
                            stock
                        };
                        sku_item.stock = group_stock;
                        sku_item.current_price = group_price;
                        goods_info.skus.push(sku_item);
                    });
                    if (skus.length > 1) {
                        this.$invoke('shopIndex', 'spec', {
                            type: 'buy',
                            url: url,
                            form: {
                                groupon_id: groupon_id
                            },
                            goods_info: goods_info
                        });
                    } else {
                        this.$invoke('shopIndex', 'submit', {
                            type: 'buy',
                            url: url,
                            form: {
                                groupon_id: groupon_id
                            },
                            goods_info: goods_info
                        });
                    }
                });
            }
        };
        resetData() {
            this.loading = true;
            this.group_list = [];
            this.goods_info = {
                loading: false,
                list: [],
                page: 1,
                hasNext: true
            }
            this.$apply();
        }
        onReachBottom() {
            if (!this.goods_info.hasNext) return;
            this.getGoodsList();
        }
        onPullDownRefresh() {
            this.goods_info = {
                loading: false,
                list: [],
                page: 1,
                hasNext: true
            };
            api.checkLogin().then(json => {
                this.userInfo = json;
                this.getGoodsList(() => {
                    wx.stopPullDownRefresh();
                });
            });
        }
        // 获取商品信息
        getGoodsInfo(goods_id) {
            let id = wx.getStorageSync("uid"),
                sdkInfo = wx.getStorageSync("sdk_zbinfo");
            let data = {
                id: id,
                token: sdkInfo.token,
                sign: sdkInfo.sign,
                ts: sdkInfo.ts
            };
            return api.request({
                url: `${api.grouponDetail}/${goods_id}`,
                data: data
            });
        }
        // 获取正在进行的拼团
        getGrouponList() {
            let {
                id
            } = this.order_info;
            api.request({
                url: `${api.groupon_list}`,
                data: {
                    id: id,
                    shop_id: api.shop_id
                }
            }).then(json => {
                this.group_list = json;
                this.$apply();
            });
        }
        onShow() {
            api.getBackgroundColor().then(json => {
                let {
                    frontColor,
                    backgroundColor,
                    title
                } = json;
                api.setBackgroundColor(frontColor, backgroundColor);
            });
        }
        onLoad(options) {
            api.loading.show();
            this.resetData();
            api.checkLogin().then(json => {
                api.from_uid = options.from_uid || api.from_uid;
                api.shop_id = options.shop_id || parseInt(api.shop_id);
                this.userInfo = json;
                this.$apply();
                let uid = wx.getStorageSync('uid'),
                    sdkInfo = wx.getStorageSync('sdk_zbinfo');
                if (!sdkInfo) {
                    api.request({
                        url: api.get_sdk_zbinfo,
                        data: {
                            uid: uid
                        }
                    }).then(json => {
                        wx.setStorageSync('sdk_zbinfo', json);
                        this.getGoodsList();
                        this.getOrderInfo(options.order_id);
                    });
                } else {
                    this.getGoodsList();
                    this.getOrderInfo(options.order_id);
                }
            });
        }
        onShareAppMessage(res) {
            let uid = api.userInfo.is_agency ? api.userInfo.uid : api.from_uid ? api.from_uid : api.userInfo.uid,
                {
                    order_id,
                    group_price,
                    wname
                } = this.order_info;
            console.log(`/pages/groupon/invite?from_uid=${uid}&order_id=${order_id}&shop_id=${api.shop_id}`)
            return {
                title: `快来和我一起拼团！${group_price}元购买【${wname}】`,
                path: `/pages/groupon/invite?from_uid=${uid}&order_id=${order_id}&shop_id=${api.shop_id}`,
                success: res => {
                    wx.showToast({
                        title: '转发成功！'
                    });
                },
                fail: res => {
                    let msg = '转发失败！';
                    if (/cancel/ig.test(res.errorMsg) > -1) {
                        msg = '转发取消！'
                    }
                    wx.showToast({
                        image: '../../images/fail.png',
                        title: msg
                    });
                }
            };
        }
    }
</script>
<style lang="less">
    @import "./common.less";
    .invite-page {
        .group-list {
            margin-top: 40rpx;
            .list-title {
                justify-content: center;
                &:before,
                &::after {
                    content: '';
                    width: 40rpx;
                    height: 2rpx;
                    background: #999;
                    margin: 0 16rpx;
                }
            }
        }
    }
</style>
